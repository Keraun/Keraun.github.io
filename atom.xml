<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iwulyの前端小站]]></title>
  <subtitle><![CDATA[我们的征途是星辰大海]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://iwuly.com/"/>
  <updated>2016-01-02T11:37:17.000Z</updated>
  <id>http://iwuly.com/</id>
  
  <author>
    <name><![CDATA[iwuly]]></name>
    <email><![CDATA[wuly93@163.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[平凡之路——写在2015年的尾巴]]></title>
    <link href="http://iwuly.com/2015/12/31/Written-in-2015/"/>
    <id>http://iwuly.com/2015/12/31/Written-in-2015/</id>
    <published>2015-12-31T15:59:59.000Z</published>
    <updated>2016-01-02T11:37:17.000Z</updated>
    <content type="html"><![CDATA[<pre><code>今天是2015年12月31日，晴。
</code></pre><p>早在几月前，我便提醒自己，不论文笔如何，总要记录点什么，颇有几分励志的味道在里面。 </p>
<p>2015年，是繁忙的一年。年初确定了自己的职业方向，随后在老板的体谅下，我结束了实习之旅。回到学校，开始为弄毕业设计忙碌，中间整理了过去实习的经验，还看了不少有关前端的经典书籍。终于在6月份毕业了，从此我过上了跟大部分人不大一样的人生。白天上班，晚上看书、写demo、折腾点业余东西。技术上虽然比年初进步了不少，但我知道自己还差的很远呢！繁忙之后，回首看看这一年的路，终究还是一条，<strong>平凡之路</strong>。</p>
<a id="more"></a>
<h3 id="u5173_u4E8E_u6280_u672F"><a href="#u5173_u4E8E_u6280_u672F" class="headerlink" title="关于技术"></a>关于技术</h3><p>参加完D2前端大会，发现今年的主题基本围绕着react和node。前端工程化、webapp经常能听到大家的一些交流。自己平时也就私下捣鼓，瞎折腾。之前用Angular参与过几个大型项目，ui－router，自定义指令，国际化翻译，都玩过。不过现在公司的项目主要是基于jQuery，主要负责web页面开发，app内webview页面的活动开发。入职半年，把之前单一的可重复性低的活动折腾成了可后台配置，前端模版和控件可自由搭配，可重复性较高的活动接入系统。由于初期经验不足考虑不全面，导致期间架构一直在迭代，更新了五六个小版本，一个大版本。很多东西在实践中摸索，在摸索中找方案，体会到了做产品的不容易之处。真心是做了才知道的感觉，光说不练绝对体会不到。</p>
<h3 id="u535A_u5BA2_u4EE5_u53CAgithub"><a href="#u535A_u5BA2_u4EE5_u53CAgithub" class="headerlink" title="博客以及github"></a>博客以及github</h3><p>说到博客也挺惭愧。其实在学生时代，我就有写博客的想法。可惜坚持不够，那时候没有把这想法落地。网上能写博客的论坛有很多，相比之下我更喜欢自己折腾，从<strong>wordpress</strong>到<strong>hexo</strong>，中间还玩过阿里云服务器（博客最后放在github上）。通过这个博客，我接触了一些同行，他们身上近乎透着同一种特质：喜欢技术，爱折腾，明白自己想要什么不想要什么。他们能看到我看不到的东西，知道很多以前我想都没想过的知识，跟这群人的接触，能让自己看到不足，及时调整状态。我感谢每个帮助过我的人。<br>说到github就更丢脸了。本来计划今年好好玩github的。没想到把账号给丢了 = =# 心塞塞。。无奈只好重新注册一个。虽然自己的技术还不咋地，不怎么拿的出手，但是好歹迈出了第一步， 跟着前端群里的大牛折腾一些小项目。不过今年要做的事情还有很多，能把博客坚持写好就不错了。</p>
<h3 id="u8BFB_u4E66"><a href="#u8BFB_u4E66" class="headerlink" title="读书"></a>读书</h3><p>2015年买了很多书，但是能坚持通读一遍的却很少。上班之后常常感觉时间妥妥的不够，所以晚上是我学习的时间。</p>
<ul>
<li><p><em>《javascript高级程序设计》</em><br>－ 第三版读完了。持续时间太长，基本上是边读边忘。今年没有好目标的话再读一遍。</p>
</li>
<li><p><em>《HTML5+CSS3从入门到精通》</em><br>－ 从头到尾看了一遍，把自己破碎的知识片段拼成了一块。可惜的是，书中并没有介绍websocket、文件api等相关内容</p>
</li>
<li><p><em>《超实用的css代码段》《超实用的javascript代码段》《超实用的jQuery代码段》</em><br>－ 实用性书籍，一口气买了这一系列的全部，里面有很多奇技淫巧，如果能把这里面的demo撸完，估计能让技术提升不只一个台阶。目前只是视为自己的代码仓库，项目需要的时候才会想起，从中了解某个功能的实现原理。</p>
</li>
<li><p><em>《jQuery基础教程》《锋利的jquery》</em><br>－ 公司项目需要用到jQuery,硬着头皮看完，偶尔还会翻翻查查某些api的用法。</p>
</li>
<li><p><em>《精通AngularJs》《AngularJs权威教程》</em><br>－ 年前买的。如果入门建议还是买后者吧，前者感觉不大实用，很多东西不能落地项目。不过两者更多的是介绍用法，对AngularJS内部原理介绍的比较少。当我知道vue后，再也没鸟过这两本书。。</p>
</li>
<li><p><em>《你所不知道的javascript 上卷》</em><br>－ 比较薄的一本，高程看不进去了，就会看这本。</p>
</li>
<li><p>《Web前端黑客技术揭秘》<br>－ pdf版，最近正在读的一本。</p>
</li>
<li><p>《JavaScript框架设计》<br>－ 额…技术还没到这个火候，感觉像在看一本天书。</p>
</li>
</ul>
<p>看的比较杂，2016年计划按照技术难度<strong>循序渐进</strong>的阅读。已有的书籍有时间的话再读几遍。未来买书可能更理智些，纸质太厚重，也许会考虑一些电子书。技术上计划偏向于学习了解原理或底层，以及原生的一些知识。</p>
<h3 id="u6280_u672F_u4EA4_u6D41"><a href="#u6280_u672F_u4EA4_u6D41" class="headerlink" title="技术交流"></a>技术交流</h3><p>年前加入了一个前端交流群，那时候群里每周五进行视频直播分享，学到了不少东西，在群里算是活跃了一年了。在平时的交流中学到了点点滴滴数不清的知识。刚开始各种提问学习，后来做一些项目，技术经验累积了，渐渐能为群贡献自己的力量。回首过去，自己的成长，离不开QQ群。感谢<strong>89hi（130977811）</strong>的小伙伴！<br>还有一个就是，<strong>javascript后花园（116366053）</strong>，高级前端群，我已经在群里潜伏快一年了，经常能看到业界大牛们之间的交流，对自己的技术提高以及未来方向的把控很有帮助。</p>
<h3 id="u751F_u6D3B"><a href="#u751F_u6D3B" class="headerlink" title="生活"></a>生活</h3><p>我是个完全不懂生活的呆傻理工男，但今年开始也要学着调剂生活了。一味的埋头代码，或者是看电影打游戏，或许不是生活的全部。自己很少会主动想起买衣服，但唯独对电子设备情有独钟，竞技鼠标，单反，甚至6s , mac pro。都是攒钱买的，拿到手的时候仿佛拿到了一件趁手的兵器。今年目标就是<strong>存钱！存钱！存钱！（重要的事情要说三遍）</strong><br>年前还报了驾校学车，天天在驾校装孙子，也是一部分时间开销。当时问驾校能不能在毕业前考出驾照，回复行，于是就报名了。到毕业时才到科目二，上了班再也没去驾校过。。。估计教练也不记得我这个人了吧。。。<br><strong>生活像代码一样，就这么几行。。。</strong></p>
<h3 id="u60F3_u6CD5_u4EE5_u53CA_u672A_u6765"><a href="#u60F3_u6CD5_u4EE5_u53CA_u672A_u6765" class="headerlink" title="想法以及未来"></a>想法以及未来</h3><p>曾经有人不理解，说我工作狂，拿出这么多时间学这个，最后将来还有没有用，我们程序员不就是这样的么？知识需要更新。尽管他时间可能很短，等到新的技术出来以后，老的技术也将完成他的历史使命。但是他需要一个接力的过程。我在想，不管从事什么职业，要有一种甘于寂寞的精神准备。尽管我现在什还不足强大，但是我非常感谢母校，对我的培养，以及我的老师和我的同学们，一直陪伴着我，所以，我要努力，但是<strong>不要着急，凡事都有应该有过程</strong>。不光是我，前端圈里，有很多群，有很多像我一样每天在学习的人。因为他们跟我有同样的年龄的，一样的想法，对于未来迷茫或呈现的那种尴尬。每一个人怎么会是一样的呢，是你没看见他们背后努力的样子吧。世界上没有这么多主角。大部分人，一辈子可能要甘于寂寞，或甘于平庸，但是并不要打击他们的努力。我也迷茫过，于是我在知乎上寻找答案[<a href="https://www.zhihu.com/question/38696079" target="_blank" rel="external">如何避免工作两年重复一年工作经验？</a>]。引用里面的精彩回复：</p>
<blockquote>
<p>“看到有些刚毕业的同学，每天都大把大把的时间投入深入研究一些新技术新概念，这样的人能不牛逼么？你必须要尊敬他，因为他未来肯定比你牛逼。”</p>
</blockquote>
<h3 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h3><p>2015年挺精彩的，很多方面，都有了一些质的改变。其实我是个成长特别慢的人，能够做到这些改变，自己也算是很满意啦。如果满分💯，我能给自己<strong>60</strong>分。希望接下来的2016，能够收获更多。</p>
<p>祝福每个人。</p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>今天是2015年12月31日，晴。
</code></pre><p>早在几月前，我便提醒自己，不论文笔如何，总要记录点什么，颇有几分励志的味道在里面。 </p>
<p>2015年，是繁忙的一年。年初确定了自己的职业方向，随后在老板的体谅下，我结束了实习之旅。回到学校，开始为弄毕业设计忙碌，中间整理了过去实习的经验，还看了不少有关前端的经典书籍。终于在6月份毕业了，从此我过上了跟大部分人不大一样的人生。白天上班，晚上看书、写demo、折腾点业余东西。技术上虽然比年初进步了不少，但我知道自己还差的很远呢！繁忙之后，回首看看这一年的路，终究还是一条，<strong>平凡之路</strong>。</p>]]>
    
    </summary>
    
      <category term="杂谈" scheme="http://iwuly.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="畅想" scheme="http://iwuly.com/tags/%E7%95%85%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Study notes: Ajax]]></title>
    <link href="http://iwuly.com/2015/02/01/ajax001/"/>
    <id>http://iwuly.com/2015/02/01/ajax001/</id>
    <published>2015-02-01T13:05:54.000Z</published>
    <updated>2016-01-07T13:42:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>前段时间群里做知识分享,<a href="http://www.cnblogs.com/lvdabao/" target="_blank" rel="external">大豹</a>老师分享了他对Ajax的一些心得体会,当时听的比较入迷,整理了一些笔记,希望对大家有帮助。</p>
</blockquote>
<h4 id="u77E5_u8BC6_u76EE_u5F55_u7ED3_u6784"><a href="#u77E5_u8BC6_u76EE_u5F55_u7ED3_u6784" class="headerlink" title="知识目录结构"></a>知识目录结构</h4><ul>
<li>Ajax 基础知识</li>
<li>jQuery中Ajax的相关用法</li>
<li>jQuery中Ajax全局设置和全局事件</li>
<li>表单数据序列化</li>
<li>实际应用中的注意事项</li>
<li>知识扩展<a id="more"></a>
</li>
</ul>
<h3 id="1-1_ajax_u662F_u4EC0_u4E48"><a href="#1-1_ajax_u662F_u4EC0_u4E48" class="headerlink" title="1.1 ajax是什么"></a>1.1 ajax是什么</h3><p>Ajax:<br>Asyncronous javascript And XML<br>异步的        JavaScript 和 XML</p>
<h3 id="1-2__u540C_u6B65_u548C_u5F02_u6B65"><a href="#1-2__u540C_u6B65_u548C_u5F02_u6B65" class="headerlink" title="1.2 同步和异步"></a>1.2 同步和异步</h3><p>javascript是单线程的，代码始终自上往下依次执行。<br>可以异步执行的代码：ajax、setTimeout、setInterval。</p>
<h3 id="1-3__u5F02_u6B65_u8BF7_u6C42_u6709_u4EC0_u4E48_u7528_u9014_uFF1F"><a href="#1-3__u5F02_u6B65_u8BF7_u6C42_u6709_u4EC0_u4E48_u7528_u9014_uFF1F" class="headerlink" title="1.3 异步请求有什么用途？"></a>1.3 异步请求有什么用途？</h3><p>1、制作单页面应用，用户操作不进行跳转、每次只更新局部内容<br>2、表单即时校验，如文本框失去焦点立即检验<br>3、进行前后端倪分离，后端只关注数据<br>4、定时异步请求（轮询），实现伪实时效果，如在线聊天室<br>5.异步加载多级数据，如树形结构、多级联动菜单、分页<br>6 。。。<br>问题：前端如何处理大数据？<br>解析：前端数据再大，还是要向服务器端请求数据，浏览器还是要解析，其实没法从根本上解决问题。如果你的dom节点多了，浏览器可能就处理不过来，造成浏览器假死现象。<br>一个方案就是：异步加载完这些数据，来进行异步处理，这样可以减轻浏览器的压力。</p>
<h3 id="1-4__u5F02_u6B65_u8BF7_u6C42_u7684_u4F18_u7F3A_u70B9"><a href="#1-4__u5F02_u6B65_u8BF7_u6C42_u7684_u4F18_u7F3A_u70B9" class="headerlink" title="1.4 异步请求的优缺点"></a>1.4 异步请求的优缺点</h3><p>优点：<br> 1.不会阻塞当前正在进行的任务。<br> 2.局部刷新，避免页面跳转，用户体验更好<br> 3.减少请求数据的大小，加载更快<br> 4.有利于前后端分离，后端只关注数据</p>
<p>缺陷：<br> 1.毁坏浏览器前进后退按钮的功能<br> 2.不利于SEO<br> 3.无法跨域</p>
<p>这些都有相应的解决方法</p>
<h3 id="1-5__u8BA4_u8BC6XMLHttpRequest_u5BF9_u8C61"><a href="#1-5__u8BA4_u8BC6XMLHttpRequest_u5BF9_u8C61" class="headerlink" title="1.5 认识XMLHttpRequest对象"></a>1.5 认识XMLHttpRequest对象</h3><p>var xhr = new XMLHttpRequest();<br>console.log(xhr);<br>几个重要的字段，方法。<br>onreadystatechange:null  请求的状态发生变化时的属性<br>readyState:0 请求的状态<br>responseText:”” 服务器返回的东西<br>status:0   对应http状态码<br>原型方法<br>abort() 取消请求。<br>open() 建立一个连接<br>send() 发送请求<br>setRequestHeader() 设置请求头部</p>
<p>textStatus会告诉你error的类型</p>
<h3 id="1-6_u539F_u751Fajax_u5199_u6CD5"><a href="#1-6_u539F_u751Fajax_u5199_u6CD5" class="headerlink" title="1.6原生ajax写法"></a>1.6原生ajax写法</h3><p>请求的5个阶段，对应的readyState的值<br>0：未初始化，send方法未调用<br>1：正在发送请求，send方法已调用<br>2：请求发送完毕，send方法执行完毕<br>3：正在解析响应内容<br>4：响应内容解析完毕</p>
<p>原生XMLHttpRequest不兼容低版本IE（6-）<br>需配合IE6: ActiveXObject(‘Microsoft.XMLHTTP’)<br>IE5: ActiveXObject(‘MSXML2.XMLHTTP’);</p>
<h3 id="2-1_jQuery_u4E2D_u7684ajax"><a href="#2-1_jQuery_u4E2D_u7684ajax" class="headerlink" title="2.1 jQuery中的ajax"></a>2.1 jQuery中的ajax</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.get(rul,[data],[callback],[type])</span><br><span class="line">$.post(url, [data], [callback], [type])</span><br><span class="line">$.getJSON(url, [data], [callback])</span><br><span class="line">$.getScript(url, [callback])</span><br><span class="line">$.fn.load(url, [data], [callback])</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'请求地址'</span>,</span><br><span class="line">    type:<span class="string">'GET/POST'</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>/<span class="literal">false</span>, <span class="comment">//是否异步</span></span><br><span class="line">    data: &#123;&#125;,<span class="comment">//发送的数据</span></span><br><span class="line">    timeout: <span class="string">'5000'</span>,<span class="comment">//超时时间</span></span><br><span class="line">    dataType: <span class="string">'json/xml/html/script/json/jsonp/text'</span></span><br><span class="line">    <span class="comment">//返回的数据格式</span></span><br><span class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;&#125;,<span class="comment">//发送请求前</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus, jqXHR</span>)</span>&#123;&#125;,<span class="comment">//请求成功</span></span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, textStatus</span>)</span>&#123;&#125;,<span class="comment">//请求失败</span></span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, testStatus</span>)</span>&#123;&#125;,<span class="comment">//请求结束</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>一般我会用$.ajax,因为他稍微更底层一点，可配置性高一点，可控性也高一点，效率也高一些。</p>
<h3 id="3_ajax_u4E2D_u7684_u5168_u5C40_u914D_u7F6E_u548C_u5168_u5C40_u4E8B_u4EF6"><a href="#3_ajax_u4E2D_u7684_u5168_u5C40_u914D_u7F6E_u548C_u5168_u5C40_u4E8B_u4EF6" class="headerlink" title="3 ajax中的全局配置和全局事件"></a>3 ajax中的全局配置和全局事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">      type: <span class="string">'POST'</span>,</span><br><span class="line">      timeout:<span class="string">'6000'</span>,</span><br><span class="line">      data: &#123;name: <span class="string">'abc'</span>&#125;,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      beforSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'loading...'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'请求失败，请重试！'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* Stuff to do when an AJAX call is started and no other AJAX calls are in progress */</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ajaxSend(<span class="function"><span class="keyword">function</span>(<span class="params">event, xhr, settings</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* stuff to do before an AJAX request is sent */</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ajaxSuccess(<span class="function"><span class="keyword">function</span>(<span class="params">event, xhr, settings</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* executes whenever an AJAX request completes successfully */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ajaxError(<span class="function"><span class="keyword">function</span>(<span class="params">event, xhr, settings, thrownError</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* Stuff to do when an AJAX call returns an error */</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params">event, xhr, settings</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* executes whenever an AJAX request completes */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ajaxStop((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* stuff to do when all AJAX calls have completed */</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="4-1__u8868_u5355_u6570_u636E_u5E8F_u5217_u5316"><a href="#4-1__u8868_u5355_u6570_u636E_u5E8F_u5217_u5316" class="headerlink" title="4.1 表单数据序列化"></a>4.1 表单数据序列化</h3><p>作用：<br>1.异步提交表单，免去跳转<br>2.快速获取表单数据<br>jQuery中的方法<br>serializ()//序列化为字符串<br>serializeArray()//序列化为数组</p>
<p>这两个不是jQuery中的方法<br>IE7以下需要引入JSON2文件<br>JSON对象呢在HTML5里面已经列为标准了呢。IE6还不能支持。所以还需要依赖JSON2文件<br>JSON.parse()//json字符串转化为json对象<br>JSON.stringify()//json对象转为json字符串</p>
<h4 id="5-1__u51FD_u6570return_u5F02_u6B65_u6570_u636E_uFF0C_u53D6_u4E0D_u5230_u7684_u95EE_u9898"><a href="#5-1__u51FD_u6570return_u5F02_u6B65_u6570_u636E_uFF0C_u53D6_u4E0D_u5230_u7684_u95EE_u9898" class="headerlink" title="5.1 函数return异步数据，取不到的问题"></a>5.1 函数return异步数据，取不到的问题</h4><p>可以设置为同步请求，或者返回promise。<br>5.2同步Ajax请求造成的UI线程阻塞问题<br>一个浏览器嘛，他分为两个引擎，一个是js引擎用来解析你的js代码，比方说chrome的js引擎是v8，UI引擎是webkit，一个浏览器么，一个js引擎，一个ui引擎。这两个是没法同时进行的。一个运行的时候，他会阻塞吊另一个。什么意思呢。发送同步请求的时候，比如2秒钟的时候，js引擎要工作2s钟的时间，他会把ui引擎给阻塞掉，所以gif图片他是需要ui引擎来渲染的，所以他会阻塞掉的。（阻塞时，js，animate照常运行，但是页面呈现出的是2s后的效果）。为什么我们平时感受不到js引擎把UI引擎给阻塞掉了？因为同步的代码是非常快的。第一个例子执行100万次才10几毫秒，所以你感受不到。但是2s种你就能做好多事情。</p>
<h3 id="5-3__u4E3Aajax_u8BBE_u7F6E_u65F6_u95F4_u8D85_u65F6"><a href="#5-3__u4E3Aajax_u8BBE_u7F6E_u65F6_u95F4_u8D85_u65F6" class="headerlink" title="5.3 为ajax设置时间超时"></a>5.3 为ajax设置时间超时</h3><h3 id="5-4__u5224_u65ADerror_u7C7B_u578B"><a href="#5-4__u5224_u65ADerror_u7C7B_u578B" class="headerlink" title="5.4 判断error类型"></a>5.4 判断error类型</h3><p>error的类型可能有：<br>timeout 超时<br>error  获取不到具体错误（请求时浏览器刷新报error错误）<br>notmodified 返回304<br>parsererror 解析xml或json错误<br>abort 请求取消</p>
<h3 id="5-5__u6269_u5C55_u77E5_u8BC6"><a href="#5-5__u6269_u5C55_u77E5_u8BC6" class="headerlink" title="5.5 扩展知识"></a>5.5 扩展知识</h3><ul>
<li>HTML5的XMLHttpRequest2</li>
<li>promise规范和jQuery的Deffered对象</li>
<li>pjax</li>
<li>跨域请求</li>
<li>Fetch</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h4><blockquote>
<p>前段时间群里做知识分享,<a href="http://www.cnblogs.com/lvdabao/">大豹</a>老师分享了他对Ajax的一些心得体会,当时听的比较入迷,整理了一些笔记,希望对大家有帮助。</p>
</blockquote>
<h4 id="u77E5_u8BC6_u76EE_u5F55_u7ED3_u6784"><a href="#u77E5_u8BC6_u76EE_u5F55_u7ED3_u6784" class="headerlink" title="知识目录结构"></a>知识目录结构</h4><ul>
<li>Ajax 基础知识</li>
<li>jQuery中Ajax的相关用法</li>
<li>jQuery中Ajax全局设置和全局事件</li>
<li>表单数据序列化</li>
<li>实际应用中的注意事项</li>
<li>知识扩展]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://iwuly.com/tags/Ajax/"/>
    
      <category term="javaScript" scheme="http://iwuly.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Study notes: 重绘(redraw)和重排(reflow)]]></title>
    <link href="http://iwuly.com/2014/09/06/redraw-reflow/"/>
    <id>http://iwuly.com/2014/09/06/redraw-reflow/</id>
    <published>2014-09-06T12:26:04.000Z</published>
    <updated>2016-01-07T13:39:26.000Z</updated>
    <content type="html"><![CDATA[<p>记忆关键词：重绘、重排、渲染、DOM树、性能</p>
<h3 id="u8FC7_u7A0B_3A"><a href="#u8FC7_u7A0B_3A" class="headerlink" title="过程:"></a>过程:</h3><p>  ① HTML文档-&gt;② DOM树 -&gt;③ 渲染树 -&gt;④ 页面<br><a id="more"></a></p>
<h3 id="u89E3_u6790_3A"><a href="#u89E3_u6790_3A" class="headerlink" title="解析:"></a>解析:</h3><ul>
<li>①-&gt;②:浏览器下载文档后根据HTML文档构建DOM树。<blockquote>
<p>（在DOM树中，每一个HTML标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。 DOM树的根节点就是 documentElement，对应的是html标签。）</p>
</blockquote>
</li>
<li>②-&gt;③:之后根据DOM元素的几何属性构建一棵用于渲染的树。<blockquote>
<p>（对CSS代码中非法的语法她会直接忽略掉.解析CSS的时候会按照如下顺序来定义优先级：浏览器默认设置，用户设置，外链样式，内联样式，html中的style。）</p>
</blockquote>
</li>
<li>③-&gt;④:当渲染树构建完成后，浏览器就可以将元素放置到正确的位置，再根据渲染树节点的样式属性绘制出页面。</li>
</ul>
<h3 id="u573A_u666F"><a href="#u573A_u666F" class="headerlink" title="场景"></a>场景</h3><ul>
<li>引起重绘：一个节点元素外观的改变绘（visibility、outline、背景色等属性）</li>
<li><p>引起重排：</p>
<blockquote>
<p>1.DOM元素的几何属性变化（宽高） （ps：可能引起子父节点、兄弟节点甚至整个文档的重新计算、性能代价昂贵）<br>2.DOM树的结构变化（节点的增删改查）<br>3.获取某些属性（offsetXXX、scrollXXX、clientXXX）<br>ps：在多次使用这些值时应进行缓存<br>4.改变元素的一些样式，调整浏览器窗口大小等等</p>
</blockquote>
<p>重排是更明显的一种改变，可以理解为渲染树需要重新计算;<br>重排的代价高于重绘。重排时会引起重绘。</p>
</li>
</ul>
<h3 id="u4E3A_u4EC0_u4E48_u8981_u907F_u514D_u4F7F_u7528table_u505A_u5E03_u5C40_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u8981_u907F_u514D_u4F7F_u7528table_u505A_u5E03_u5C40_uFF1F" class="headerlink" title="为什么要避免使用table做布局？"></a>为什么要避免使用table做布局？</h3><p>正常的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，通常要花3倍的时间才能确定好其在渲染树中节点的属性。这也是为什么我们要避免使用table做布局的一个原因。</p>
<h3 id="u9488_u5BF9_u51CF_u5C11_u91CD_u7ED8_u548C_u91CD_u6392_u7684_u4E00_u4E9B_u4F18_u5316_uFF1A"><a href="#u9488_u5BF9_u51CF_u5C11_u91CD_u7ED8_u548C_u91CD_u6392_u7684_u4E00_u4E9B_u4F18_u5316_uFF1A" class="headerlink" title="针对减少重绘和重排的一些优化："></a>针对减少重绘和重排的一些优化：</h3><ol>
<li>将多次改变样式属性的操作合并成一次操作</li>
<li>使操作次数多的元素脱离了文档流，它的变化不会影响到其他元素。</li>
<li>在内存中多次操作节点，完成后再添加到文档中去。</li>
<li>由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。</li>
<li>在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。</li>
</ol>
<h3 id="u77E5_u8BC6_u5DE9_u56FA_uFF1A"><a href="#u77E5_u8BC6_u5DE9_u56FA_uFF1A" class="headerlink" title="知识巩固："></a>知识巩固：</h3><p>在前端如何实现一个表格的排序（尽可能减少重绘和重排的影响）。<br>以下是我个人的想法，如有考虑不周的情况，欢迎在评论区留言~大家一起进步~</p>
<blockquote>
<p>1.获取表格数据：获取鼠标点击的表头单元格的列号，遍历数据行，获取行内数据，以数组形式缓存起来<br>2.对数据排序：根据关键字对数组排序。<br>3.对排序好的数据进行字符串拼接。用一个变量保存拼接好的字符串内容。<br>4.清空tbody中的内容，插入已拼接好的内容。</p>
</blockquote>
<h3 id="u53C2_u8003_u6587_u6863_uFF1A"><a href="#u53C2_u8003_u6587_u6863_uFF1A" class="headerlink" title="参考文档："></a>参考文档：</h3><p><a href="http://kb.cnblogs.com/page/169820/" target="_blank" rel="external">http://kb.cnblogs.com/page/169820/</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/37830667" target="_blank" rel="external">http://blog.csdn.net/lihongxun945/article/details/37830667</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>记忆关键词：重绘、重排、渲染、DOM树、性能</p>
<h3 id="u8FC7_u7A0B_3A"><a href="#u8FC7_u7A0B_3A" class="headerlink" title="过程:"></a>过程:</h3><p>  ① HTML文档-&gt;② DOM树 -&gt;③ 渲染树 -&gt;④ 页面<br>]]>
    
    </summary>
    
      <category term="重排" scheme="http://iwuly.com/tags/%E9%87%8D%E6%8E%92/"/>
    
      <category term="重绘" scheme="http://iwuly.com/tags/%E9%87%8D%E7%BB%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://iwuly.com/2014/09/02/Hello/"/>
    <id>http://iwuly.com/2014/09/02/Hello/</id>
    <published>2014-09-02T11:16:07.000Z</published>
    <updated>2015-11-29T10:29:49.000Z</updated>
    <content type="html"><![CDATA[<p>  凌飏（iwuly）于2014-09-02开始运行这个小站,后续会逐步建设,欢迎大家来访^_^</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  凌飏（iwuly）于2014-09-02开始运行这个小站,后续会逐步建设,欢迎大家来访^_^</p>
]]>
    </summary>
    
  </entry>
  
</feed>
